{"version":3,"file":"hds-autocomplete-input.cjs.production.min.js","sources":["../src/AutoCompleteInput/styles.ts","../src/AutoCompleteInput/AutoCompleteInput.tsx"],"sourcesContent":["import { ChakraStylesConfig } from 'chakra-react-select';\r\n\r\nexport interface Item {\r\n  value: string | number;\r\n  label: string;\r\n}\r\n\r\ninterface GetStylesProps {\r\n  error?: boolean;\r\n  multiple?: boolean;\r\n  darkMode?: boolean;\r\n  testId?: string;\r\n}\r\n\r\nconst getStyles = ({\r\n  error,\r\n  darkMode,\r\n  testId,\r\n  multiple,\r\n}: GetStylesProps): ChakraStylesConfig<Item> => {\r\n  return {\r\n    menuList: provided => ({\r\n      ...provided,\r\n      _active: {\r\n        background: 'transparent',\r\n      },\r\n      '&::-webkit-scrollbar': {\r\n        width: '16px',\r\n        scrollBehavior: 'smooth',\r\n      },\r\n      '&::-webkit-scrollbar-thumb': {\r\n        background: '#E2E8F0',\r\n        border: '6px solid rgba(0, 0, 0, 0)',\r\n        backgroundClip: 'padding-box',\r\n        borderRadius: '9999px',\r\n      },\r\n      backgroundColor: darkMode ? '#2E2E2E' : undefined,\r\n      maxHeight: '210px',\r\n    }),\r\n    multiValueLabel: baseStyle => ({\r\n      ...baseStyle,\r\n      color: darkMode ? 'neutrals.100' : 'neutrals.700',\r\n      fontSize: 'paragraphs-xs-default',\r\n      letterSpacing: '0.02em',\r\n    }),\r\n\r\n    multiValue: baseStyle => {\r\n      return {\r\n        ...baseStyle,\r\n        backgroundColor: darkMode ? 'neutrals.800' : 'alpha.white.500',\r\n        border: `1px solid`,\r\n        borderColor: error\r\n          ? 'interface.error.700'\r\n          : darkMode\r\n          ? 'neutrals.700'\r\n          : 'neutrals.200',\r\n        borderRadius: '6px',\r\n        padding: '2px 5px',\r\n        height: '24px',\r\n        marginRight: '6px',\r\n        'data-testid': testId,\r\n      };\r\n    },\r\n    valueContainer: provided => ({ ...provided, padding: '0 0' }),\r\n    multiValueRemove: provided => ({\r\n      ...provided,\r\n      _hover: {\r\n        backgroundColor: 'none',\r\n      },\r\n      color: 'neutrals.400',\r\n    }),\r\n    control: (base, state) => {\r\n      return {\r\n        ...base,\r\n        _focus: {\r\n          borderColor: error ? 'interface.error.700' : 'brand.primary.700',\r\n        },\r\n        _focusVisible: {\r\n          outline: 'none',\r\n        },\r\n        _invalid: {\r\n          borderColor: 'interface.error.700',\r\n          _hover: { borderColor: 'none' },\r\n        },\r\n        _hover: {\r\n          borderColor: 'brand.primary.700',\r\n        },\r\n        border: '1px solid',\r\n        color: 'neutrals.900',\r\n        backgroundColor: darkMode ? 'neutrals.800' : 'alpha.white.500',\r\n        padding: multiple && state.hasValue ? '0px 14px' : '0px 12px',\r\n        height: '44px',\r\n        boxShadow: '0px 1px 2px rgba(16, 24, 40, 0.05)',\r\n        borderRadius: '8px',\r\n      };\r\n    },\r\n    option: (style, { isFocused, isSelected }) => {\r\n      return {\r\n        ...style,\r\n        backgroundColor: isFocused\r\n          ? darkMode\r\n            ? 'neutrals.700'\r\n            : 'gray.50'\r\n          : isSelected\r\n          ? darkMode\r\n            ? 'neutrals.800'\r\n            : 'gray.50'\r\n          : undefined,\r\n        _hover: {\r\n          backgroundColor: darkMode ? '#525252' : 'gray.50',\r\n        },\r\n        _active: {\r\n          backgroundColor: isSelected\r\n            ? darkMode\r\n              ? 'neutrals.700'\r\n              : 'gray.400'\r\n            : undefined,\r\n        },\r\n        color: darkMode ? 'neutrals.100' : 'neutrals.900',\r\n      };\r\n    },\r\n    menu: style => {\r\n      return {\r\n        ...style,\r\n        zIndex: 9,\r\n        backgroundColor: darkMode ? 'neutrals.800' : 'white',\r\n      };\r\n    },\r\n    singleValue: styles => ({\r\n      ...styles,\r\n      color: darkMode ? 'neutrals.100' : 'neutrals.900',\r\n      fontSize: 'paragraph-sm-default',\r\n    }),\r\n  };\r\n};\r\n\r\nexport default getStyles;\r\n","import { ChevronDownIcon, ChevronUpIcon } from '@chakra-ui/icons';\r\nimport { Avatar, BoxProps, HStack, Icon } from '@chakra-ui/react';\r\nimport {\r\n  FormContainer,\r\n  FormContainerPartProps,\r\n  FormContainerProps,\r\n} from '@highoutput/hds-forms';\r\nimport {\r\n  chakraComponents,\r\n  ChakraStylesConfig,\r\n  GroupBase,\r\n  MultiValue,\r\n  Select,\r\n  SingleValue,\r\n} from 'chakra-react-select';\r\nimport React, { useId } from 'react';\r\n\r\nimport getStyles from './styles';\r\n\r\nexport interface Item {\r\n  value: string | number;\r\n  label: string;\r\n}\r\n\r\nexport interface OptionItem extends Item {\r\n  avatar?: string;\r\n}\r\n\r\nexport interface AutoCompleteInputFieldPartProps\r\n  extends FormContainerPartProps {\r\n  reactChakraStyle?:\r\n    | ChakraStylesConfig<Item, boolean, GroupBase<Item>>\r\n    | undefined;\r\n}\r\n\r\nexport interface AutoCompleteInputFieldProps\r\n  extends Omit<FormContainerProps, 'partProps'> {\r\n  options: OptionItem[];\r\n  loading?: boolean;\r\n  fieldLabelProps?: Omit<BoxProps, 'children'>;\r\n  required?: boolean;\r\n  placement?: 'auto' | 'top' | 'bottom';\r\n  multiple?: boolean;\r\n  darkMode?: boolean;\r\n  autoFocus?: boolean;\r\n  showDropdownIndicator?: boolean;\r\n  placeholder?: string;\r\n  partProps?: Partial<AutoCompleteInputFieldPartProps>;\r\n  value?: string | string[] | number | number[];\r\n  onChangeValue: (...event: any[]) => void;\r\n}\r\n\r\nconst AutoCompleteInput = (props: AutoCompleteInputFieldProps) => {\r\n  const {\r\n    value,\r\n    options,\r\n    darkMode,\r\n    placement,\r\n    showDropdownIndicator,\r\n    errorMsg,\r\n    partProps,\r\n    autoFocus,\r\n    disabled,\r\n    onChangeValue,\r\n    multiple,\r\n    loading,\r\n    placeholder,\r\n  } = props;\r\n\r\n  const uid = useId();\r\n\r\n  const styles = getStyles({\r\n    error: Boolean(errorMsg),\r\n    multiple,\r\n    darkMode: darkMode,\r\n  });\r\n\r\n  return (\r\n    <FormContainer {...props}>\r\n      <Select\r\n        options={options}\r\n        chakraStyles={partProps?.reactChakraStyle ?? styles}\r\n        placeholder={placeholder}\r\n        menuPlacement={placement ?? 'auto'}\r\n        isMulti={multiple}\r\n        inputId=\"auto-complete-input\"\r\n        useBasicStyles\r\n        aria-label=\"auto-complete-input\"\r\n        captureMenuScroll\r\n        backspaceRemovesValue\r\n        autoFocus={autoFocus}\r\n        isLoading={loading}\r\n        data-testid={`${uid}-auto-complete-input-field`}\r\n        isSearchable\r\n        isDisabled={disabled}\r\n        isClearable\r\n        components={{\r\n          ClearIndicator: () => null,\r\n          IndicatorSeparator: () => null,\r\n          DropdownIndicator: ({ selectProps }) => {\r\n            const icon = selectProps.menuIsOpen\r\n              ? ChevronUpIcon\r\n              : ChevronDownIcon;\r\n            return showDropdownIndicator ? (\r\n              <Icon as={icon} w={4} h={6} stroke=\"brand.primary.500\" />\r\n            ) : null;\r\n          },\r\n          MultiValueContainer: ({ children, data, ...props }) => (\r\n            <chakraComponents.MultiValueContainer {...props} data={data}>\r\n              <HStack align=\"center\" spacing=\"5px\">\r\n                {data.avatar && (\r\n                  <Avatar width=\"16px\" height=\"16px\" src={data.avatar} />\r\n                )}\r\n                {children}\r\n              </HStack>\r\n            </chakraComponents.MultiValueContainer>\r\n          ),\r\n        }}\r\n        onChange={(options: MultiValue<Item> | (SingleValue<Item> | null)) => {\r\n          return isArray<MultiValue<Item>>(options)\r\n            ? onChangeValue(options.map((o) => o.value))\r\n            : onChangeValue(options?.value ?? null);\r\n        }}\r\n        value={options.filter((option) => {\r\n          return Array.isArray(value)\r\n            ? value.some((val: string | number) => val === option.value)\r\n            : value === option.value;\r\n        })}\r\n      />\r\n    </FormContainer>\r\n  );\r\n};\r\n\r\nexport default AutoCompleteInput;\r\n\r\nfunction isArray<T>(subject: unknown): subject is T {\r\n  return Array.isArray(subject);\r\n}\r\n"],"names":["props","value","options","darkMode","placement","showDropdownIndicator","errorMsg","partProps","autoFocus","disabled","onChangeValue","multiple","loading","placeholder","uid","useId","styles","error","testId","menuList","provided","_active","background","&::-webkit-scrollbar","width","scrollBehavior","&::-webkit-scrollbar-thumb","border","backgroundClip","borderRadius","backgroundColor","undefined","maxHeight","multiValueLabel","baseStyle","color","fontSize","letterSpacing","multiValue","borderColor","padding","height","marginRight","data-testid","valueContainer","multiValueRemove","_hover","control","base","state","_focus","_focusVisible","outline","_invalid","hasValue","boxShadow","option","style","isSelected","isFocused","menu","zIndex","singleValue","getStyles","Boolean","React","FormContainer","Select","chakraStyles","reactChakraStyle","menuPlacement","isMulti","inputId","useBasicStyles","captureMenuScroll","backspaceRemovesValue","isLoading","isSearchable","isDisabled","isClearable","components","ClearIndicator","IndicatorSeparator","DropdownIndicator","Icon","as","selectProps","menuIsOpen","ChevronUpIcon","ChevronDownIcon","w","h","stroke","MultiValueContainer","children","data","chakraComponents","HStack","align","spacing","avatar","Avatar","src","onChange","Array","isArray","map","o","filter","some","val"],"mappings":"ufAcA,oDCsC0B,SAACA,SAEvBC,EAaED,EAbFC,MACAC,EAYEF,EAZFE,QACAC,EAWEH,EAXFG,SACAC,EAUEJ,EAVFI,UACAC,EASEL,EATFK,sBACAC,EAQEN,EARFM,SACAC,EAOEP,EAPFO,UACAC,EAMER,EANFQ,UACAC,EAKET,EALFS,SACAC,EAIEV,EAJFU,cACAC,EAGEX,EAHFW,SACAC,EAEEZ,EAFFY,QACAC,EACEb,EADFa,YAGIC,EAAMC,UAENC,EDzDU,gBAChBC,IAAAA,MACAd,IAAAA,SACAe,IAAAA,OACAP,IAAAA,SAEA,MAAO,CACLQ,SAAU,SAAAC,GAAQ,YACbA,GACHC,QAAS,CACPC,WAAY,eAEdC,uBAAwB,CACtBC,MAAO,OACPC,eAAgB,UAElBC,6BAA8B,CAC5BJ,WAAY,UACZK,OAAQ,6BACRC,eAAgB,cAChBC,aAAc,UAEhBC,gBAAiB3B,EAAW,eAAY4B,EACxCC,UAAW,WAEbC,gBAAiB,SAAAC,GAAS,YACrBA,GACHC,MAAOhC,EAAW,eAAiB,eACnCiC,SAAU,wBACVC,cAAe,YAGjBC,WAAY,SAAAJ,GACV,YACKA,GACHJ,gBAAiB3B,EAAW,eAAiB,kBAC7CwB,mBACAY,YAAatB,EACT,sBACAd,EACA,eACA,eACJ0B,aAAc,MACdW,QAAS,UACTC,OAAQ,OACRC,YAAa,MACbC,cAAezB,KAGnB0B,eAAgB,SAAAxB,GAAQ,YAAUA,GAAUoB,QAAS,SACrDK,iBAAkB,SAAAzB,GAAQ,YACrBA,GACH0B,OAAQ,CACNhB,gBAAiB,QAEnBK,MAAO,kBAETY,QAAS,SAACC,EAAMC,GACd,YACKD,GACHE,OAAQ,CACNX,YAAatB,EAAQ,sBAAwB,qBAE/CkC,cAAe,CACbC,QAAS,QAEXC,SAAU,CACRd,YAAa,sBACbO,OAAQ,CAAEP,YAAa,SAEzBO,OAAQ,CACNP,YAAa,qBAEfZ,OAAQ,YACRQ,MAAO,eACPL,gBAAiB3B,EAAW,eAAiB,kBAC7CqC,QAAS7B,GAAYsC,EAAMK,SAAW,WAAa,WACnDb,OAAQ,OACRc,UAAW,qCACX1B,aAAc,SAGlB2B,OAAQ,SAACC,SAAoBC,IAAAA,WAC3B,YACKD,GACH3B,kBAHc6B,UAIVxD,EACE,eACA,UACFuD,EACAvD,EACE,eACA,eACF4B,EACJe,OAAQ,CACNhB,gBAAiB3B,EAAW,UAAY,WAE1CkB,QAAS,CACPS,gBAAiB4B,EACbvD,EACE,eACA,gBACF4B,GAENI,MAAOhC,EAAW,eAAiB,kBAGvCyD,KAAM,SAAAH,GACJ,YACKA,GACHI,OAAQ,EACR/B,gBAAiB3B,EAAW,eAAiB,WAGjD2D,YAAa,SAAA9C,GAAM,YACdA,GACHmB,MAAOhC,EAAW,eAAiB,eACnCiC,SAAU,2BC5DC2B,CAAU,CACvB9C,MAAO+C,QAAQ1D,GACfK,SAAAA,EACAR,SAAUA,IAGZ,OACE8D,gBAACC,iCAAkBlE,GACjBiE,gBAACE,UACCjE,QAASA,EACTkE,4BAAc7D,SAAAA,EAAW8D,oBAAoBrD,EAC7CH,YAAaA,EACbyD,oBAAelE,EAAAA,EAAa,OAC5BmE,QAAS5D,EACT6D,QAAQ,sBACRC,+BACW,sBACXC,qBACAC,yBACAnE,UAAWA,EACXoE,UAAWhE,gBACKE,+BAChB+D,gBACAC,WAAYrE,EACZsE,eACAC,WAAY,CACVC,eAAgB,WAAA,OAAM,MACtBC,mBAAoB,WAAA,OAAM,MAC1BC,kBAAmB,YAIjB,OAAO9E,EACL4D,gBAACmB,QAAKC,KALYC,YACKC,WACrBC,gBACAC,kBAEcC,EAAG,EAAGC,EAAG,EAAGC,OAAO,sBACjC,MAENC,oBAAqB,YAAA,IAAGC,IAAAA,SAAUC,IAAAA,KAAS/F,0IAAK,OAC9CiE,gBAAC+B,mBAAiBH,qCAAwB7F,GAAO+F,KAAMA,IACrD9B,gBAACgC,UAAOC,MAAM,SAASC,QAAQ,OAC5BJ,EAAKK,QACJnC,gBAACoC,UAAO7E,MAAM,OAAOiB,OAAO,OAAO6D,IAAKP,EAAKK,SAE9CN,MAKTS,SAAU,SAACrG,SACT,OAiBDsG,MAAMC,QAjB4BvG,GAC7BQ,EAAcR,EAAQwG,KAAI,SAACC,GAAC,OAAKA,EAAE1G,UACnCS,iBAAcR,SAAAA,EAASD,SAAS,OAEtCA,MAAOC,EAAQ0G,QAAO,SAACpD,GACrB,OAAOgD,MAAMC,QAAQxG,GACjBA,EAAM4G,MAAK,SAACC,GAAoB,OAAKA,IAAQtD,EAAOvD,SACpDA,IAAUuD,EAAOvD"}