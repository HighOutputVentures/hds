{"version":3,"file":"hds-autocomplete-input.cjs.production.min.js","sources":["../src/AutoCompleteInput/styles.ts","../src/AutoCompleteInput/AutoCompleteInput.tsx"],"sourcesContent":["import { ChakraStylesConfig } from 'chakra-react-select';\n\nexport interface Item {\n  value: string | number;\n  label: string;\n}\n\ninterface GetStylesProps {\n  error?: boolean;\n  multiple?: boolean;\n  darkMode?: boolean;\n  testId?: string;\n}\n\nconst getStyles = ({\n  error,\n  darkMode,\n  testId,\n  multiple,\n}: GetStylesProps): ChakraStylesConfig<Item> => {\n  return {\n    menuList: provided => ({\n      ...provided,\n      _active: {\n        background: 'transparent',\n      },\n      '&::-webkit-scrollbar': {\n        width: '16px',\n        scrollBehavior: 'smooth',\n      },\n      '&::-webkit-scrollbar-thumb': {\n        background: '#E2E8F0',\n        border: '6px solid rgba(0, 0, 0, 0)',\n        backgroundClip: 'padding-box',\n        borderRadius: '9999px',\n      },\n      backgroundColor: darkMode ? '#2E2E2E' : undefined,\n      maxHeight: '210px',\n    }),\n    multiValueLabel: baseStyle => ({\n      ...baseStyle,\n      color: darkMode ? 'neutrals.100' : 'neutrals.700',\n      fontSize: 'paragraphs-xs-default',\n      letterSpacing: '0.02em',\n    }),\n\n    multiValue: baseStyle => {\n      return {\n        ...baseStyle,\n        backgroundColor: darkMode ? 'neutrals.800' : 'alpha.white.500',\n        border: `1px solid`,\n        borderColor: error\n          ? 'interface.error.700'\n          : darkMode\n          ? 'neutrals.700'\n          : 'neutrals.200',\n        borderRadius: '6px',\n        padding: '2px 5px',\n        height: '24px',\n        marginRight: '6px',\n        'data-testid': testId,\n      };\n    },\n    valueContainer: provided => ({ ...provided, padding: '0 0' }),\n    multiValueRemove: provided => ({\n      ...provided,\n      _hover: {\n        backgroundColor: 'none',\n      },\n      color: 'neutrals.400',\n    }),\n    control: (base, state) => {\n      return {\n        ...base,\n        _focus: {\n          borderColor: error ? 'interface.error.700' : 'brand.primary.700',\n        },\n        _focusVisible: {\n          outline: 'none',\n        },\n        _invalid: {\n          borderColor: 'interface.error.700',\n          _hover: { borderColor: 'none' },\n        },\n        _hover: {\n          borderColor: 'brand.primary.700',\n        },\n        border: '1px solid',\n        color: 'neutrals.900',\n        backgroundColor: darkMode ? 'neutrals.800' : 'alpha.white.500',\n        padding: multiple && state.hasValue ? '0px 14px' : '0px 12px',\n        height: '44px',\n        boxShadow: '0px 1px 2px rgba(16, 24, 40, 0.05)',\n        borderRadius: '8px',\n      };\n    },\n    option: (style, { isFocused, isSelected }) => {\n      return {\n        ...style,\n        backgroundColor: isFocused\n          ? darkMode\n            ? 'neutrals.700'\n            : 'gray.50'\n          : isSelected\n          ? darkMode\n            ? 'neutrals.800'\n            : 'gray.50'\n          : undefined,\n        _hover: {\n          backgroundColor: darkMode ? '#525252' : 'gray.50',\n        },\n        _active: {\n          backgroundColor: isSelected\n            ? darkMode\n              ? 'neutrals.700'\n              : 'gray.400'\n            : undefined,\n        },\n        color: darkMode ? 'neutrals.100' : 'neutrals.900',\n      };\n    },\n    menu: style => {\n      return {\n        ...style,\n        zIndex: 9,\n        backgroundColor: darkMode ? 'neutrals.800' : 'white',\n      };\n    },\n    singleValue: styles => ({\n      ...styles,\n      color: darkMode ? 'neutrals.100' : 'neutrals.900',\n      fontSize: 'paragraph-sm-default',\n    }),\n  };\n};\n\nexport default getStyles;\n","import { ChevronDownIcon, ChevronUpIcon } from '@chakra-ui/icons';\nimport { Avatar, BoxProps, HStack, Icon } from '@chakra-ui/react';\nimport {\n  FormContainer,\n  FormContainerPartProps,\n  FormContainerProps,\n} from '@highoutput/hds-forms';\nimport {\n  chakraComponents,\n  ChakraStylesConfig,\n  GroupBase,\n  MultiValue,\n  Select,\n  SingleValue,\n} from 'chakra-react-select';\nimport React, { useId } from 'react';\n\nimport getStyles from './styles';\n\nexport interface Item {\n  value: string | number;\n  label: string;\n}\n\nexport interface OptionItem extends Item {\n  avatar?: string;\n}\n\nexport interface AutoCompleteInputFieldPartProps\n  extends FormContainerPartProps {\n  reactChakraStyle?:\n    | ChakraStylesConfig<Item, boolean, GroupBase<Item>>\n    | undefined;\n}\n\nexport interface AutoCompleteInputFieldProps\n  extends Omit<FormContainerProps, 'partProps'> {\n  options: OptionItem[];\n  loading?: boolean;\n  fieldLabelProps?: Omit<BoxProps, 'children'>;\n  required?: boolean;\n  placement?: 'auto' | 'top' | 'bottom';\n  multiple?: boolean;\n  darkMode?: boolean;\n  autoFocus?: boolean;\n  showDropdownIndicator?: boolean;\n  placeholder?: string;\n  partProps?: Partial<AutoCompleteInputFieldPartProps>;\n  value?: string | string[] | number | number[];\n  onChangeValue: (...event: any[]) => void;\n}\n\nconst AutoCompleteInput = (props: AutoCompleteInputFieldProps) => {\n  const {\n    value,\n    options,\n    darkMode,\n    placement,\n    showDropdownIndicator,\n    errorMsg,\n    partProps,\n    autoFocus,\n    disabled,\n    onChangeValue,\n    multiple,\n    loading,\n    placeholder,\n  } = props;\n\n  const uid = useId();\n\n  const styles = getStyles({\n    error: Boolean(errorMsg),\n    multiple,\n    darkMode: darkMode,\n  });\n\n  return (\n    <FormContainer {...props}>\n      <Select\n        options={options}\n        chakraStyles={partProps?.reactChakraStyle ?? styles}\n        placeholder={placeholder}\n        menuPlacement={placement ?? 'auto'}\n        isMulti={multiple}\n        inputId=\"auto-complete-input\"\n        useBasicStyles\n        aria-label=\"auto-complete-input\"\n        captureMenuScroll\n        backspaceRemovesValue\n        autoFocus={autoFocus}\n        isLoading={loading}\n        data-testid={`${uid}-auto-complete-input-field`}\n        isSearchable\n        isDisabled={disabled}\n        isClearable\n        components={{\n          ClearIndicator: () => null,\n          IndicatorSeparator: () => null,\n          DropdownIndicator: ({ selectProps }) => {\n            const icon = selectProps.menuIsOpen\n              ? ChevronUpIcon\n              : ChevronDownIcon;\n            return showDropdownIndicator ? (\n              <Icon as={icon} w={4} h={6} stroke=\"brand.primary.500\" />\n            ) : null;\n          },\n          MultiValueContainer: ({ children, data, ...props }) => (\n            <chakraComponents.MultiValueContainer {...props} data={data}>\n              <HStack align=\"center\" spacing=\"5px\">\n                {data.avatar && (\n                  <Avatar width=\"16px\" height=\"16px\" src={data.avatar} />\n                )}\n                {children}\n              </HStack>\n            </chakraComponents.MultiValueContainer>\n          ),\n        }}\n        onChange={(options: MultiValue<Item> | (SingleValue<Item> | null)) => {\n          return isArray<MultiValue<Item>>(options)\n            ? onChangeValue(options.map((o) => o.value))\n            : onChangeValue(options?.value ?? null);\n        }}\n        value={options.filter((option) => {\n          return Array.isArray(value)\n            ? value.some((val: string | number) => val === option.value)\n            : value === option.value;\n        })}\n      />\n    </FormContainer>\n  );\n};\n\nexport default AutoCompleteInput;\n\nfunction isArray<T>(subject: unknown): subject is T {\n  return Array.isArray(subject);\n}\n"],"names":["props","value","options","darkMode","placement","showDropdownIndicator","errorMsg","partProps","autoFocus","disabled","onChangeValue","multiple","loading","placeholder","uid","useId","styles","error","testId","menuList","provided","_active","background","&::-webkit-scrollbar","width","scrollBehavior","&::-webkit-scrollbar-thumb","border","backgroundClip","borderRadius","backgroundColor","undefined","maxHeight","multiValueLabel","baseStyle","color","fontSize","letterSpacing","multiValue","borderColor","padding","height","marginRight","data-testid","valueContainer","multiValueRemove","_hover","control","base","state","_focus","_focusVisible","outline","_invalid","hasValue","boxShadow","option","style","isSelected","isFocused","menu","zIndex","singleValue","getStyles","Boolean","React","FormContainer","Select","chakraStyles","reactChakraStyle","menuPlacement","isMulti","inputId","useBasicStyles","captureMenuScroll","backspaceRemovesValue","isLoading","isSearchable","isDisabled","isClearable","components","ClearIndicator","IndicatorSeparator","DropdownIndicator","Icon","as","selectProps","menuIsOpen","ChevronUpIcon","ChevronDownIcon","w","h","stroke","MultiValueContainer","children","data","chakraComponents","HStack","align","spacing","avatar","Avatar","src","onChange","Array","isArray","map","o","filter","some","val"],"mappings":"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"}