{"version":3,"file":"hds-auth.cjs.production.min.js","sources":["../src/components/AuthProvider/AuthContext.tsx","../src/components/AuthProvider/constants.ts","../src/components/AuthProvider/getAuthState.ts","../src/components/AuthProvider/utils.ts","../src/components/AuthForm/validation.ts","../src/components/AuthForm/OTPForm.tsx","../src/components/AuthProvider/AuthProvider.tsx","../src/components/AuthForm/CredentialLoginForm.tsx","../src/components/AuthForm/OTPVerificationForm.tsx","../src/components/AuthProvider/logout.ts","../src/components/AuthProvider/useAuthService.tsx","../src/components/AuthProvider/useAuthState.tsx","../src/components/AuthProvider/useProfile.tsx"],"sourcesContent":["import * as React from 'react';\nimport type { AuthConfig } from './types';\n\nconst AuthContext = React.createContext<AuthConfig>({\n  hostname: '',\n});\n\nexport default AuthContext;\n","const accessTokenId = '__AuthToken__';\n\nconst constants = {\n  accessTokenId,\n};\n\nexport default constants;\n","import cookies from 'js-cookie';\nimport constants from './constants';\nimport type { AuthState } from './types';\n\nexport default function getAuthState(): AuthState {\n  const token = cookies.get(constants.accessTokenId);\n\n  return {\n    token,\n    status: token ? 'authenticated' : 'unauthenticated',\n  };\n}","export async function postJson<T>(\n  url: string,\n  postfields: Record<string, unknown>\n): Promise<T> {\n  const response = await fetch(url, {\n    body: JSON.stringify(postfields),\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n\n  const parsed = await response.json();\n  if (!response.ok) throw new Error(parsed.error.message);\n  return parsed;\n}\n","import { InferType, object, SchemaOf, string } from 'yup';\n\nexport interface CredentialFormInputEmailProps {\n  email: string;\n  password: string;\n}\n\nexport const withCredentialFormSchemaEmail: SchemaOf<CredentialFormInputEmailProps> = object().shape(\n  {\n    email: string()\n      .email('Please enter a valid email address')\n      .required('Email is required.'),\n    password: string().required('Password is required'),\n  }\n);\n\nexport type withCredentialFormSchemaEmailValues = InferType<\n  typeof withCredentialFormSchemaEmail\n>;\nexport interface CredentialFormInputNameProps {\n  name: string;\n  password: string;\n}\n\nexport const withCredentialFormSchemaName: SchemaOf<CredentialFormInputNameProps> = object().shape(\n  {\n    name: string()\n      .required('Name is required')\n      .trim(),\n    password: string().required('Password is required'),\n  }\n);\n\nexport type withCredentialFormSchemaNameValues = InferType<\n  typeof withCredentialFormSchemaName\n>;\n\nexport const generateEmailOTPSchema: SchemaOf<{\n  emailAddress: string;\n}> = object().shape({\n  emailAddress: string()\n    .email('Please enter a valid email address.')\n    .required('Email is required.'),\n});\n\nexport type GenerateEmailOTPSchemaValues = InferType<\n  typeof generateEmailOTPSchema\n>;\n\nexport const authenticateSchema: SchemaOf<{\n  otp: string;\n}> = object().shape({\n  otp: string()\n    .when(\n      '$numberOfFields',\n      (numberOfFields: number, authenticateSchema: any) => {\n        return authenticateSchema.length(\n          numberOfFields,\n          'OTP code is incomplete.'\n        );\n      }\n    )\n    .required('OTP code is required.'),\n});\n\nexport type AuthenticateSchemaValues = InferType<typeof authenticateSchema>;\n","import { Box, Button, Heading, Text } from '@chakra-ui/react';\nimport { PinInputField } from '@highoutput/hds-forms';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport React, { ReactNode } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { authenticateSchema, AuthenticateSchemaValues } from './validation';\n\nexport interface OTPFormProps {\n  title?: ReactNode;\n  subTitle?: ReactNode;\n  numberOfFields?: number;\n  buttonText?: string;\n  otpType?: 'number' | 'alphanumeric';\n  onSubmitOTPValue?(value: AuthenticateSchemaValues): void;\n}\nconst OTPForm = (props: OTPFormProps) => {\n  const {\n    subTitle,\n    title,\n    otpType = 'number',\n    numberOfFields = 6,\n    buttonText,\n    onSubmitOTPValue,\n  } = props;\n  const buttonRef = React.useRef<HTMLButtonElement>(null);\n  const {\n    register: registerOtp,\n    handleSubmit: handleSubmitOtp,\n    formState: formStateOtp,\n  } = useForm<AuthenticateSchemaValues>({\n    resolver: yupResolver(authenticateSchema),\n    context: { numberOfFields: numberOfFields },\n    shouldUnregister: true,\n    defaultValues: {\n      otp: '',\n    },\n  });\n  const onSubmitOTP = async (value: AuthenticateSchemaValues) => {\n    if (onSubmitOTPValue) {\n      onSubmitOTPValue(value);\n    }\n  };\n  return (\n    <Box\n      as=\"form\"\n      w={350}\n      data-testid=\"box.otpform.form\"\n      onSubmit={handleSubmitOtp(onSubmitOTP)}\n    >\n      <Box mb=\"6\">\n        {title ? (\n          title\n        ) : (\n          <Heading as=\"h1\" mb={2}>\n            Check your inbox\n          </Heading>\n        )}\n\n        {subTitle ? (\n          subTitle\n        ) : (\n          <Text>We have sent a 6-digit code to your email </Text>\n        )}\n      </Box>\n\n      <PinInputField\n        id=\"otp\"\n        {...registerOtp('otp')}\n        errorMsg={formStateOtp.errors.otp?.message}\n        disabled={formStateOtp.isSubmitting}\n        numberOfFields={numberOfFields}\n        autoFocus\n        onComplete={buttonRef.current?.click}\n        type={otpType}\n      />\n      <Button\n        variant={'primary'}\n        ref={buttonRef}\n        type=\"submit\"\n        isLoading={formStateOtp.isSubmitting}\n        width={'100%'}\n        data-testid=\"button.otp.submit\"\n        marginTop={5}\n      >\n        {buttonText ? buttonText : 'Sign In'}\n      </Button>\n    </Box>\n  );\n};\n\nexport default OTPForm;\n","import * as React from 'react';\nimport AuthContext from './AuthContext';\nimport type { AuthConfig } from './types';\n\nexport default function AuthProvider({children, ...config}: React.PropsWithChildren<AuthConfig>) {\n  return <AuthContext.Provider value={config}>{children}</AuthContext.Provider>;\n}","import { ViewIcon, ViewOffIcon } from '@chakra-ui/icons';\nimport { Box, Button, Center, Stack, Text } from '@chakra-ui/react';\nimport { InputField } from '@highoutput/hds-forms';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport React, { FC, ReactNode } from 'react';\nimport { useForm } from 'react-hook-form';\n\nimport {\n  CredentialFormInputEmailProps,\n  CredentialFormInputNameProps,\n  withCredentialFormSchemaEmail,\n  withCredentialFormSchemaEmailValues,\n  withCredentialFormSchemaName,\n  withCredentialFormSchemaNameValues,\n} from './validation';\n\nexport type CredentialLoginFormDefaultProps = {\n  loginTitle?: ReactNode;\n  signUpTitle?: ReactNode;\n};\nexport interface CredentialLoginFormNameProps\n  extends CredentialLoginFormDefaultProps {\n  variant?: 'name-password';\n  nameLabel: string;\n  onSubmit?(values: CredentialFormInputNameProps): void;\n}\nexport interface CredentialLoginFormEmailProps\n  extends CredentialLoginFormDefaultProps {\n  variant?: 'email-password';\n  nameLabel?: never;\n  onSubmit?(values: CredentialFormInputEmailProps): void;\n}\n\nexport type CredentialLoginFormProps =\n  | CredentialLoginFormNameProps\n  | CredentialLoginFormEmailProps;\n\nconst CredentialLoginForm: FC<CredentialLoginFormProps> = (props) => {\n  const {\n    signUpTitle,\n    loginTitle,\n    variant,\n    onSubmit,\n    nameLabel = 'Username',\n  } = props;\n\n  const [showPassword, setShowPassword] = React.useState(false);\n  const [isSignUp, setIsSignUp] = React.useState(false);\n  const { register, handleSubmit, formState } = useForm<\n    withCredentialFormSchemaEmailValues & withCredentialFormSchemaNameValues\n  >({\n    resolver: yupResolver(\n      variant === 'name-password'\n        ? withCredentialFormSchemaName\n        : withCredentialFormSchemaEmail\n    ),\n    shouldUnregister: true,\n  });\n\n  const onSubmitForm = async (\n    values: withCredentialFormSchemaNameValues &\n      withCredentialFormSchemaEmailValues\n  ) => {\n    if (onSubmit) {\n      onSubmit(values);\n    }\n  };\n\n  return (\n    <Box as={'form'} maxW={512} onSubmit={handleSubmit(onSubmitForm)}>\n      <Center m={0} p={0}>\n        {isSignUp && signUpTitle ? (\n          signUpTitle\n        ) : !isSignUp && loginTitle ? (\n          loginTitle\n        ) : !isSignUp && !loginTitle ? (\n          <Text size=\"header-3\" my={8}>\n            Login\n          </Text>\n        ) : (\n          isSignUp &&\n          !signUpTitle && (\n            <Text size=\"header-3\" my={8}>\n              Sign up\n            </Text>\n          )\n        )}\n      </Center>\n\n      <Stack spacing={'1rem'}>\n        {variant === 'name-password' ? (\n          <InputField\n            {...register('name')}\n            id={'name'}\n            label={nameLabel?.charAt(0).toUpperCase() + nameLabel?.slice(1)}\n            placeholder={`Input your ${nameLabel?.toLowerCase()}`}\n            errorMsg={formState.errors.name?.message}\n            disabled={formState.isSubmitting}\n            partProps={{\n              input: {\n                'aria-label': 'name-input',\n                role: 'input',\n              },\n            }}\n          />\n        ) : (\n          <InputField\n            {...register('email')}\n            id={'email'}\n            label=\"Email\"\n            placeholder=\"Input your email\"\n            errorMsg={formState.errors.email?.message}\n            disabled={formState.isSubmitting}\n            partProps={{\n              input: { 'aria-label': 'email-input', role: 'input' },\n            }}\n          />\n        )}\n\n        <InputField\n          {...register('password')}\n          id=\"password\"\n          label=\"Password\"\n          type={showPassword ? 'text' : 'password'}\n          placeholder=\"Input your password\"\n          errorMsg={formState.errors.password?.message}\n          disabled={formState.isSubmitting}\n          rightIcon={\n            <Button\n              data-testid={'show-hide-btn'}\n              background={'none'}\n              _hover={{ background: 'none' }}\n              _active={{ background: 'none' }}\n              aria-label={showPassword ? 'show-password' : 'hide-password'}\n              onClick={() => setShowPassword((prev) => !prev)}\n            >\n              {showPassword ? <ViewIcon /> : <ViewOffIcon />}\n            </Button>\n          }\n          partProps={{\n            input: {\n              'aria-label': 'password-input',\n              role: 'input',\n            },\n          }}\n        />\n      </Stack>\n      <Button\n        w=\"full\"\n        variant=\"primary\"\n        isLoading={formState.isSubmitting}\n        type=\"submit\"\n        my={8}\n      >\n        {isSignUp ? 'Sign Up' : 'Login'}\n      </Button>\n      <Center>\n        <Text>\n          {isSignUp ? 'Already have an account?' : 'No account yet?'}{' '}\n          <Text\n            as={'a'}\n            data-testid={'switch-form-link'}\n            _hover={{ textDecoration: 'underline', cursor: 'pointer' }}\n            aria-label={isSignUp ? 'login-link-label' : 'signup-link-label'}\n            onClick={() => setIsSignUp((prev) => !prev)}\n            fontWeight={'bold'}\n            role={'link'}\n          >\n            {isSignUp ? 'Login' : 'Sign up'}\n          </Text>\n        </Text>\n      </Center>\n    </Box>\n  );\n};\n\nexport default CredentialLoginForm;\n","import { Box, Button } from '@chakra-ui/react';\nimport { InputField } from '@highoutput/hds-forms';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\nimport OTPForm, { OTPFormProps } from './OTPForm';\nimport {\n  AuthenticateSchemaValues,\n  generateEmailOTPSchema,\n  GenerateEmailOTPSchemaValues,\n} from './validation';\n\nexport interface OTPVerificationProps extends OTPFormProps {\n  onSubmitEmailValue?(value: GenerateEmailOTPSchemaValues): void;\n  onSubmitOTPValue?(value: AuthenticateSchemaValues): void;\n  otpReceived: boolean;\n  numberOfFields?: number;\n  otpType?: 'number' | 'alphanumeric';\n}\n\nconst OTPVerificationForm = (props: OTPVerificationProps) => {\n  const {\n    otpReceived,\n    onSubmitEmailValue,\n    numberOfFields,\n    title,\n    subTitle,\n    onSubmitOTPValue,\n  } = props;\n\n  const { register, handleSubmit, formState } =\n    useForm<GenerateEmailOTPSchemaValues>({\n      resolver: yupResolver(generateEmailOTPSchema),\n      defaultValues: {\n        emailAddress: '',\n      },\n      shouldUnregister: true,\n    });\n\n  const onSubmitEmail = async (value: GenerateEmailOTPSchemaValues) => {\n    if (onSubmitEmailValue) {\n      onSubmitEmailValue(value);\n    }\n  };\n  const onSubmitOTP = async (value: AuthenticateSchemaValues) => {\n    if (onSubmitOTPValue) {\n      onSubmitOTPValue(value);\n    }\n  };\n\n  const { errors, isSubmitting } = formState;\n\n  return (\n    <Box>\n      {!otpReceived ? (\n        <Box\n          as={'form'}\n          data-testid=\"box.emailform.form\"\n          w={350}\n          onSubmit={handleSubmit(onSubmitEmail)}\n        >\n          <InputField\n            id=\"emailAddress\"\n            {...register('emailAddress')}\n            errorMsg={errors.emailAddress?.message}\n            disabled={isSubmitting}\n            placeholder={'Enter your email address'}\n            partProps={{\n              input: {\n                'aria-label': 'email-input',\n                role: 'input',\n              },\n            }}\n          />\n\n          <Button\n            variant={'primary'}\n            type=\"submit\"\n            isLoading={isSubmitting}\n            width={'100%'}\n            marginTop={'10px'}\n            data-testid=\"button.email.submit\"\n          >\n            Sign In\n          </Button>\n        </Box>\n      ) : (\n        <Box data-testid=\"otp.component\">\n          <OTPForm\n            title={title}\n            subTitle={subTitle}\n            onSubmitOTPValue={(value) => onSubmitOTP(value)}\n            numberOfFields={numberOfFields}\n          />\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nexport default OTPVerificationForm;\n","import cookies from 'js-cookie';\nimport constants from './constants';\n\nexport default function logout(callback?: () => void) {\n  cookies.remove(constants.accessTokenId);\n  callback?.();\n}\n","import cookies from 'js-cookie';\nimport * as React from 'react';\nimport AuthContext from './AuthContext';\nimport constants from './constants';\nimport type { AuthService } from './types';\nimport { postJson } from './utils';\n\nexport default function useAuthService() {\n  const {hostname} = React.useContext(AuthContext);\n\n  const generateOtp: AuthService['generateOtp'] = React.useCallback(\n    async (emailAddress) => {\n      await postJson(`${hostname}/otp/generate`, {emailAddress});\n    },\n    [hostname],\n  );\n\n  const validateOtp: AuthService['validateOtp'] = React.useCallback(\n    async (otp) => {\n      const {token} = await postJson<{token: string}>(`${hostname}/otp/validate`, {otp});\n\n      cookies.set(constants.accessTokenId, token, {\n        secure: process.env.NODE_ENV === 'production',\n        expires: 29,\n        sameSite: 'strict',\n      });\n    },\n    [hostname],\n  );\n\n  return {\n    generateOtp,\n    validateOtp,\n  };\n}","import * as React from 'react';\nimport getAuthState from './getAuthState';\nimport type { AuthState } from './types';\n\ntype Config = {\n  onauthenticated: () => void;\n  onunauthenticated: () => void;\n};\n\nexport default function useAuthState({onauthenticated, onunauthenticated}: Partial<Config> = {}) {\n  const [state, setState] = React.useState<AuthState>({\n    status: 'loading',\n  });\n\n  const handleState = React.useCallback(() => {\n    const newState = getAuthState();\n    setState(newState);\n  }, []);\n\n  React.useEffect(() => {\n    handleState();\n    return () => setState({status: 'loading'});\n  }, [handleState]);\n\n  React.useEffect(() => {\n    document.addEventListener('visibilitychange', handleState);\n    return () => document.removeEventListener('visibilitychange', handleState);\n  }, [handleState]);\n\n  React.useEffect(() => {\n    if (state.status === 'authenticated') onauthenticated?.();\n    if (state.status === 'unauthenticated') onunauthenticated?.();\n  }, [onauthenticated, onunauthenticated, state.status]);\n\n  return state;\n}\n","/**\n *\n * _NOT IMPLEMENTED YET_\n *\n */\nexport default function useProfile() {\n  return {};\n}\n"],"names":["AuthContext","React","hostname","constants","accessTokenId","getAuthState","token","cookies","get","status","postJson","_postJson","url","postfields","_context","fetch","body","JSON","stringify","method","headers","Content-Type","response","json","parsed","ok","Error","error","message","withCredentialFormSchemaEmail","object","shape","email","string","required","password","withCredentialFormSchemaName","name","trim","generateEmailOTPSchema","emailAddress","authenticateSchema","otp","when","numberOfFields","length","OTPForm","props","subTitle","title","_props$otpType","otpType","_props$numberOfFields","buttonText","onSubmitOTPValue","buttonRef","useRef","useForm","resolver","yupResolver","context","shouldUnregister","defaultValues","registerOtp","register","formStateOtp","formState","Box","as","w","onSubmit","handleSubmitOtp","handleSubmit","value","mb","Heading","Text","PinInputField","id","errorMsg","errors","_formStateOtp$errors$","disabled","isSubmitting","autoFocus","onComplete","current","_buttonRef$current","click","type","Button","variant","ref","isLoading","width","marginTop","children","config","Provider","signUpTitle","loginTitle","_props$nameLabel","nameLabel","useState","showPassword","setShowPassword","isSignUp","setIsSignUp","maxW","values","Center","m","p","size","my","Stack","spacing","InputField","label","charAt","toUpperCase","slice","placeholder","toLowerCase","_formState$errors$nam","partProps","input","aria-label","role","_formState$errors$ema","_formState$errors$pas","rightIcon","background","_hover","_active","onClick","prev","ViewIcon","ViewOffIcon","textDecoration","cursor","fontWeight","otpReceived","onSubmitEmailValue","onSubmitEmail","onSubmitOTP","_errors$emailAddress","callback","remove","generateOtp","validateOtp","_context2","set","secure","process","expires","sameSite","onauthenticated","onunauthenticated","state","setState","handleState","newState","document","addEventListener","removeEventListener"],"mappings":"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"}