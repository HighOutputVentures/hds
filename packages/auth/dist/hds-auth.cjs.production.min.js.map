{"version":3,"file":"hds-auth.cjs.production.min.js","sources":["../src/components/AuthProvider/AuthContext.tsx","../src/components/AuthProvider/constants.ts","../src/components/AuthProvider/getAuthState.ts","../src/components/AuthProvider/utils.ts","../src/components/AuthForm/validation.ts","../src/components/AuthForm/OTPForm.tsx","../src/components/AuthProvider/AuthProvider.tsx","../src/components/AuthForm/CredentialLoginForm.tsx","../src/components/AuthForm/OTPVerificationForm.tsx","../src/components/AuthProvider/logout.ts","../src/components/AuthProvider/useAuthService.tsx","../src/components/AuthProvider/useAuthState.tsx","../src/components/AuthProvider/useProfile.tsx"],"sourcesContent":["import * as React from 'react';\r\nimport type { AuthConfig } from './types';\r\n\r\nconst AuthContext = React.createContext<AuthConfig>({\r\n  hostname: '',\r\n});\r\n\r\nexport default AuthContext;\r\n","const accessTokenId = '__AuthToken__';\r\n\r\nconst constants = {\r\n  accessTokenId,\r\n};\r\n\r\nexport default constants;\r\n","import cookies from 'js-cookie';\r\nimport constants from './constants';\r\nimport type { AuthState } from './types';\r\n\r\nexport default function getAuthState(): AuthState {\r\n  const token = cookies.get(constants.accessTokenId);\r\n\r\n  return {\r\n    token,\r\n    status: token ? 'authenticated' : 'unauthenticated',\r\n  };\r\n}","export async function postJson<T>(\r\n  url: string,\r\n  postfields: Record<string, unknown>\r\n): Promise<T> {\r\n  const response = await fetch(url, {\r\n    body: JSON.stringify(postfields),\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n  });\r\n\r\n  const parsed = await response.json();\r\n  if (!response.ok) throw new Error(parsed.error.message);\r\n  return parsed;\r\n}\r\n","import { InferType, object, SchemaOf, string } from 'yup';\r\n\r\nexport interface CredentialFormInputEmailProps {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nexport const withCredentialFormSchemaEmail: SchemaOf<CredentialFormInputEmailProps> = object().shape(\r\n  {\r\n    email: string()\r\n      .email('Please enter a valid email address')\r\n      .required('Email is required.'),\r\n    password: string().required('Password is required'),\r\n  }\r\n);\r\n\r\nexport type withCredentialFormSchemaEmailValues = InferType<\r\n  typeof withCredentialFormSchemaEmail\r\n>;\r\nexport interface CredentialFormInputNameProps {\r\n  name: string;\r\n  password: string;\r\n}\r\n\r\nexport const withCredentialFormSchemaName: SchemaOf<CredentialFormInputNameProps> = object().shape(\r\n  {\r\n    name: string()\r\n      .required('Name is required')\r\n      .trim(),\r\n    password: string().required('Password is required'),\r\n  }\r\n);\r\n\r\nexport type withCredentialFormSchemaNameValues = InferType<\r\n  typeof withCredentialFormSchemaName\r\n>;\r\n\r\nexport const generateEmailOTPSchema: SchemaOf<{\r\n  emailAddress: string;\r\n}> = object().shape({\r\n  emailAddress: string()\r\n    .email('Please enter a valid email address.')\r\n    .required('Email is required.'),\r\n});\r\n\r\nexport type GenerateEmailOTPSchemaValues = InferType<\r\n  typeof generateEmailOTPSchema\r\n>;\r\n\r\nexport const authenticateSchema: SchemaOf<{\r\n  otp: string;\r\n}> = object().shape({\r\n  otp: string()\r\n    .when(\r\n      '$numberOfFields',\r\n      (numberOfFields: number, authenticateSchema: any) => {\r\n        return authenticateSchema.length(\r\n          numberOfFields,\r\n          'OTP code is incomplete.'\r\n        );\r\n      }\r\n    )\r\n    .required('OTP code is required.'),\r\n});\r\n\r\nexport type AuthenticateSchemaValues = InferType<typeof authenticateSchema>;\r\n","import { Box, Button, Heading, Text } from '@chakra-ui/react';\r\nimport { PinInputField } from '@highoutput/hds-forms';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport React, { ReactNode } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { authenticateSchema, AuthenticateSchemaValues } from './validation';\r\n\r\nexport interface OTPFormProps {\r\n  title?: ReactNode;\r\n  subTitle?: ReactNode;\r\n  numberOfFields?: number;\r\n  buttonText?: string;\r\n  otpType?: 'number' | 'alphanumeric';\r\n  onSubmitOTPValue?(value: AuthenticateSchemaValues): void;\r\n}\r\nconst OTPForm = (props: OTPFormProps) => {\r\n  const {\r\n    subTitle,\r\n    title,\r\n    otpType = 'number',\r\n    numberOfFields = 6,\r\n    buttonText,\r\n    onSubmitOTPValue,\r\n  } = props;\r\n  const buttonRef = React.useRef<HTMLButtonElement>(null);\r\n  const {\r\n    register: registerOtp,\r\n    handleSubmit: handleSubmitOtp,\r\n    formState: formStateOtp,\r\n  } = useForm<AuthenticateSchemaValues>({\r\n    resolver: yupResolver(authenticateSchema),\r\n    context: { numberOfFields: numberOfFields },\r\n    shouldUnregister: true,\r\n    defaultValues: {\r\n      otp: '',\r\n    },\r\n  });\r\n  const onSubmitOTP = async (value: AuthenticateSchemaValues) => {\r\n    if (onSubmitOTPValue) {\r\n      onSubmitOTPValue(value);\r\n    }\r\n  };\r\n  return (\r\n    <Box\r\n      as=\"form\"\r\n      w={350}\r\n      data-testid=\"box.otpform.form\"\r\n      onSubmit={handleSubmitOtp(onSubmitOTP)}\r\n    >\r\n      <Box mb=\"6\">\r\n        {title ? (\r\n          title\r\n        ) : (\r\n          <Heading as=\"h1\" mb={2}>\r\n            Check your inbox\r\n          </Heading>\r\n        )}\r\n\r\n        {subTitle ? (\r\n          subTitle\r\n        ) : (\r\n          <Text>We have sent a 6-digit code to your email </Text>\r\n        )}\r\n      </Box>\r\n\r\n      <PinInputField\r\n        id=\"otp\"\r\n        {...registerOtp('otp')}\r\n        errorMsg={formStateOtp.errors.otp?.message}\r\n        disabled={formStateOtp.isSubmitting}\r\n        numberOfFields={numberOfFields}\r\n        autoFocus\r\n        onComplete={buttonRef.current?.click}\r\n        type={otpType}\r\n      />\r\n      <Button\r\n        variant={'primary'}\r\n        ref={buttonRef}\r\n        type=\"submit\"\r\n        isLoading={formStateOtp.isSubmitting}\r\n        width={'100%'}\r\n        data-testid=\"button.otp.submit\"\r\n        marginTop={5}\r\n      >\r\n        {buttonText ? buttonText : 'Sign In'}\r\n      </Button>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default OTPForm;\r\n","import * as React from 'react';\r\nimport AuthContext from './AuthContext';\r\nimport type { AuthConfig } from './types';\r\n\r\nexport default function AuthProvider({children, ...config}: React.PropsWithChildren<AuthConfig>) {\r\n  return <AuthContext.Provider value={config}>{children}</AuthContext.Provider>;\r\n}","import { ViewIcon, ViewOffIcon } from '@chakra-ui/icons';\r\nimport { Box, Button, Center, Stack, Text } from '@chakra-ui/react';\r\nimport { InputField } from '@highoutput/hds-forms';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport React, { FC, ReactNode } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\n\r\nimport {\r\n  CredentialFormInputEmailProps,\r\n  CredentialFormInputNameProps,\r\n  withCredentialFormSchemaEmail,\r\n  withCredentialFormSchemaEmailValues,\r\n  withCredentialFormSchemaName,\r\n  withCredentialFormSchemaNameValues,\r\n} from './validation';\r\n\r\nexport type CredentialLoginFormDefaultProps = {\r\n  loginTitle?: ReactNode;\r\n  signUpTitle?: ReactNode;\r\n};\r\nexport interface CredentialLoginFormNameProps\r\n  extends CredentialLoginFormDefaultProps {\r\n  variant?: 'name-password';\r\n  nameLabel: string;\r\n  onSubmit?(values: CredentialFormInputNameProps): void;\r\n}\r\nexport interface CredentialLoginFormEmailProps\r\n  extends CredentialLoginFormDefaultProps {\r\n  variant?: 'email-password';\r\n  nameLabel?: never;\r\n  onSubmit?(values: CredentialFormInputEmailProps): void;\r\n}\r\n\r\nexport type CredentialLoginFormProps =\r\n  | CredentialLoginFormNameProps\r\n  | CredentialLoginFormEmailProps;\r\n\r\nconst CredentialLoginForm: FC<CredentialLoginFormProps> = (props) => {\r\n  const {\r\n    signUpTitle,\r\n    loginTitle,\r\n    variant,\r\n    onSubmit,\r\n    nameLabel = 'Username',\r\n  } = props;\r\n\r\n  const [showPassword, setShowPassword] = React.useState(false);\r\n  const [isSignUp, setIsSignUp] = React.useState(false);\r\n  const { register, handleSubmit, formState } = useForm<\r\n    withCredentialFormSchemaEmailValues & withCredentialFormSchemaNameValues\r\n  >({\r\n    resolver: yupResolver(\r\n      variant === 'name-password'\r\n        ? withCredentialFormSchemaName\r\n        : withCredentialFormSchemaEmail\r\n    ),\r\n    shouldUnregister: true,\r\n  });\r\n\r\n  const onSubmitForm = async (\r\n    values: withCredentialFormSchemaNameValues &\r\n      withCredentialFormSchemaEmailValues\r\n  ) => {\r\n    if (onSubmit) {\r\n      onSubmit(values);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box as={'form'} maxW={512} onSubmit={handleSubmit(onSubmitForm)}>\r\n      <Center m={0} p={0}>\r\n        {isSignUp && signUpTitle ? (\r\n          signUpTitle\r\n        ) : !isSignUp && loginTitle ? (\r\n          loginTitle\r\n        ) : !isSignUp && !loginTitle ? (\r\n          <Text size=\"header-3\" my={8}>\r\n            Login\r\n          </Text>\r\n        ) : (\r\n          isSignUp &&\r\n          !signUpTitle && (\r\n            <Text size=\"header-3\" my={8}>\r\n              Sign up\r\n            </Text>\r\n          )\r\n        )}\r\n      </Center>\r\n\r\n      <Stack spacing={'1rem'}>\r\n        {variant === 'name-password' ? (\r\n          <InputField\r\n            {...register('name')}\r\n            id={'name'}\r\n            label={nameLabel?.charAt(0).toUpperCase() + nameLabel?.slice(1)}\r\n            placeholder={`Input your ${nameLabel?.toLowerCase()}`}\r\n            errorMsg={formState.errors.name?.message}\r\n            disabled={formState.isSubmitting}\r\n            partProps={{\r\n              input: {\r\n                'aria-label': 'name-input',\r\n                role: 'input',\r\n              },\r\n            }}\r\n          />\r\n        ) : (\r\n          <InputField\r\n            {...register('email')}\r\n            id={'email'}\r\n            label=\"Email\"\r\n            placeholder=\"Input your email\"\r\n            errorMsg={formState.errors.email?.message}\r\n            disabled={formState.isSubmitting}\r\n            partProps={{\r\n              input: { 'aria-label': 'email-input', role: 'input' },\r\n            }}\r\n          />\r\n        )}\r\n\r\n        <InputField\r\n          {...register('password')}\r\n          id=\"password\"\r\n          label=\"Password\"\r\n          type={showPassword ? 'text' : 'password'}\r\n          placeholder=\"Input your password\"\r\n          errorMsg={formState.errors.password?.message}\r\n          disabled={formState.isSubmitting}\r\n          rightIcon={\r\n            <Button\r\n              data-testid={'show-hide-btn'}\r\n              background={'none'}\r\n              _hover={{ background: 'none' }}\r\n              _active={{ background: 'none' }}\r\n              aria-label={showPassword ? 'show-password' : 'hide-password'}\r\n              onClick={() => setShowPassword((prev) => !prev)}\r\n            >\r\n              {showPassword ? <ViewIcon /> : <ViewOffIcon />}\r\n            </Button>\r\n          }\r\n          partProps={{\r\n            input: {\r\n              'aria-label': 'password-input',\r\n              role: 'input',\r\n            },\r\n          }}\r\n        />\r\n      </Stack>\r\n      <Button\r\n        w=\"full\"\r\n        variant=\"primary\"\r\n        isLoading={formState.isSubmitting}\r\n        type=\"submit\"\r\n        my={8}\r\n      >\r\n        {isSignUp ? 'Sign Up' : 'Login'}\r\n      </Button>\r\n      <Center>\r\n        <Text>\r\n          {isSignUp ? 'Already have an account?' : 'No account yet?'}{' '}\r\n          <Text\r\n            as={'a'}\r\n            data-testid={'switch-form-link'}\r\n            _hover={{ textDecoration: 'underline', cursor: 'pointer' }}\r\n            aria-label={isSignUp ? 'login-link-label' : 'signup-link-label'}\r\n            onClick={() => setIsSignUp((prev) => !prev)}\r\n            fontWeight={'bold'}\r\n            role={'link'}\r\n          >\r\n            {isSignUp ? 'Login' : 'Sign up'}\r\n          </Text>\r\n        </Text>\r\n      </Center>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default CredentialLoginForm;\r\n","import { Box, Button } from '@chakra-ui/react';\r\nimport { InputField } from '@highoutput/hds-forms';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport React from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport OTPForm, { OTPFormProps } from './OTPForm';\r\nimport {\r\n  AuthenticateSchemaValues,\r\n  generateEmailOTPSchema,\r\n  GenerateEmailOTPSchemaValues,\r\n} from './validation';\r\n\r\nexport interface OTPVerificationProps extends OTPFormProps {\r\n  onSubmitEmailValue?(value: GenerateEmailOTPSchemaValues): void;\r\n  onSubmitOTPValue?(value: AuthenticateSchemaValues): void;\r\n  otpReceived: boolean;\r\n  numberOfFields?: number;\r\n  otpType?: 'number' | 'alphanumeric';\r\n}\r\n\r\nconst OTPVerificationForm = (props: OTPVerificationProps) => {\r\n  const {\r\n    otpReceived,\r\n    onSubmitEmailValue,\r\n    numberOfFields,\r\n    title,\r\n    subTitle,\r\n    onSubmitOTPValue,\r\n  } = props;\r\n\r\n  const { register, handleSubmit, formState } =\r\n    useForm<GenerateEmailOTPSchemaValues>({\r\n      resolver: yupResolver(generateEmailOTPSchema),\r\n      defaultValues: {\r\n        emailAddress: '',\r\n      },\r\n      shouldUnregister: true,\r\n    });\r\n\r\n  const onSubmitEmail = async (value: GenerateEmailOTPSchemaValues) => {\r\n    if (onSubmitEmailValue) {\r\n      onSubmitEmailValue(value);\r\n    }\r\n  };\r\n  const onSubmitOTP = async (value: AuthenticateSchemaValues) => {\r\n    if (onSubmitOTPValue) {\r\n      onSubmitOTPValue(value);\r\n    }\r\n  };\r\n\r\n  const { errors, isSubmitting } = formState;\r\n\r\n  return (\r\n    <Box>\r\n      {!otpReceived ? (\r\n        <Box\r\n          as={'form'}\r\n          data-testid=\"box.emailform.form\"\r\n          w={350}\r\n          onSubmit={handleSubmit(onSubmitEmail)}\r\n        >\r\n          <InputField\r\n            id=\"emailAddress\"\r\n            {...register('emailAddress')}\r\n            errorMsg={errors.emailAddress?.message}\r\n            disabled={isSubmitting}\r\n            placeholder={'Enter your email address'}\r\n            partProps={{\r\n              input: {\r\n                'aria-label': 'email-input',\r\n                role: 'input',\r\n              },\r\n            }}\r\n          />\r\n\r\n          <Button\r\n            variant={'primary'}\r\n            type=\"submit\"\r\n            isLoading={isSubmitting}\r\n            width={'100%'}\r\n            marginTop={'10px'}\r\n            data-testid=\"button.email.submit\"\r\n          >\r\n            Sign In\r\n          </Button>\r\n        </Box>\r\n      ) : (\r\n        <Box data-testid=\"otp.component\">\r\n          <OTPForm\r\n            title={title}\r\n            subTitle={subTitle}\r\n            onSubmitOTPValue={(value) => onSubmitOTP(value)}\r\n            numberOfFields={numberOfFields}\r\n          />\r\n        </Box>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default OTPVerificationForm;\r\n","import cookies from 'js-cookie';\r\nimport constants from './constants';\r\n\r\nexport default function logout(callback?: () => void) {\r\n  cookies.remove(constants.accessTokenId);\r\n  callback?.();\r\n}\r\n","import cookies from 'js-cookie';\r\nimport * as React from 'react';\r\nimport AuthContext from './AuthContext';\r\nimport constants from './constants';\r\nimport type { AuthService } from './types';\r\nimport { postJson } from './utils';\r\n\r\nexport default function useAuthService() {\r\n  const {hostname} = React.useContext(AuthContext);\r\n\r\n  const generateOtp: AuthService['generateOtp'] = React.useCallback(\r\n    async (emailAddress) => {\r\n      await postJson(`${hostname}/otp/generate`, {emailAddress});\r\n    },\r\n    [hostname],\r\n  );\r\n\r\n  const validateOtp: AuthService['validateOtp'] = React.useCallback(\r\n    async (otp) => {\r\n      const {token} = await postJson<{token: string}>(`${hostname}/otp/validate`, {otp});\r\n\r\n      cookies.set(constants.accessTokenId, token, {\r\n        secure: process.env.NODE_ENV === 'production',\r\n        expires: 29,\r\n        sameSite: 'strict',\r\n      });\r\n    },\r\n    [hostname],\r\n  );\r\n\r\n  return {\r\n    generateOtp,\r\n    validateOtp,\r\n  };\r\n}","import * as React from 'react';\r\nimport getAuthState from './getAuthState';\r\nimport type { AuthState } from './types';\r\n\r\ntype Config = {\r\n  onauthenticated: () => void;\r\n  onunauthenticated: () => void;\r\n};\r\n\r\nexport default function useAuthState({onauthenticated, onunauthenticated}: Partial<Config> = {}) {\r\n  const [state, setState] = React.useState<AuthState>({\r\n    status: 'loading',\r\n  });\r\n\r\n  const handleState = React.useCallback(() => {\r\n    const newState = getAuthState();\r\n    setState(newState);\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    handleState();\r\n    return () => setState({status: 'loading'});\r\n  }, [handleState]);\r\n\r\n  React.useEffect(() => {\r\n    document.addEventListener('visibilitychange', handleState);\r\n    return () => document.removeEventListener('visibilitychange', handleState);\r\n  }, [handleState]);\r\n\r\n  React.useEffect(() => {\r\n    if (state.status === 'authenticated') onauthenticated?.();\r\n    if (state.status === 'unauthenticated') onunauthenticated?.();\r\n  }, [onauthenticated, onunauthenticated, state.status]);\r\n\r\n  return state;\r\n}\r\n","/**\r\n *\r\n * _NOT IMPLEMENTED YET_\r\n *\r\n */\r\nexport default function useProfile() {\r\n  return {};\r\n}\r\n"],"names":["AuthContext","React","hostname","constants","accessTokenId","getAuthState","token","cookies","get","status","postJson","_postJson","url","postfields","_context","fetch","body","JSON","stringify","method","headers","Content-Type","response","json","parsed","ok","Error","error","message","withCredentialFormSchemaEmail","object","shape","email","string","required","password","withCredentialFormSchemaName","name","trim","generateEmailOTPSchema","emailAddress","authenticateSchema","otp","when","numberOfFields","length","OTPForm","props","subTitle","title","_props$otpType","otpType","_props$numberOfFields","buttonText","onSubmitOTPValue","buttonRef","useRef","useForm","resolver","yupResolver","context","shouldUnregister","defaultValues","registerOtp","register","formStateOtp","formState","Box","as","w","onSubmit","handleSubmitOtp","handleSubmit","value","mb","Heading","Text","PinInputField","id","errorMsg","errors","_formStateOtp$errors$","disabled","isSubmitting","autoFocus","onComplete","current","_buttonRef$current","click","type","Button","variant","ref","isLoading","width","marginTop","children","config","Provider","signUpTitle","loginTitle","_props$nameLabel","nameLabel","useState","showPassword","setShowPassword","isSignUp","setIsSignUp","maxW","values","Center","m","p","size","my","Stack","spacing","InputField","label","charAt","toUpperCase","slice","placeholder","toLowerCase","_formState$errors$nam","partProps","input","aria-label","role","_formState$errors$ema","_formState$errors$pas","rightIcon","background","_hover","_active","onClick","prev","ViewIcon","ViewOffIcon","textDecoration","cursor","fontWeight","otpReceived","onSubmitEmailValue","onSubmitEmail","onSubmitOTP","_errors$emailAddress","callback","remove","generateOtp","validateOtp","_context2","set","secure","process","expires","sameSite","onauthenticated","onunauthenticated","state","setState","handleState","newState","document","addEventListener","removeEventListener"],"mappings":"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"}