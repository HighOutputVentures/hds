{"version":3,"file":"hds-contact-us.cjs.production.min.js","sources":["../src/http.utils.ts","../src/useSupport.tsx","../src/validation.ts","../src/ContactForm.tsx","../src/ContactCard.tsx","../src/ContactPage.tsx"],"sourcesContent":["type Dict = Record<string, unknown>;\r\n\r\ntype PostJson = <T = unknown>(url: string, postfields: Dict) => Promise<T>;\r\n\r\nexport const postJson: PostJson = async (u, d) => {\r\n  const response = await fetch(u, {\r\n    body: JSON.stringify(d),\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n  });\r\n\r\n  const parsed = await response.json();\r\n\r\n  if (!response.ok) throw new Error(parsed.error.message);\r\n\r\n  return parsed;\r\n};\r\n","import { useState } from 'react';\r\nimport { postJson } from './http.utils';\r\nimport { ContactFormInputProps } from './validation';\r\n\r\nconst useSupport = () => {\r\n  const [hasError, setHasError] = useState(false);\r\n  const [isLoading, setLoading] = useState(false);\r\n  const [isSuccess, setSuccess] = useState(false);\r\n\r\n  const postSupport = async (url: string, data: ContactFormInputProps) => {\r\n    setHasError(false);\r\n    setSuccess(false);\r\n    setLoading(true);\r\n\r\n    try {\r\n      const response = await postJson<{ ok: true }>(url, { ...data });\r\n\r\n      if (response) {\r\n        setSuccess(true);\r\n      }\r\n    } catch (error) {\r\n      setHasError(true);\r\n    }\r\n\r\n    setLoading(false);\r\n  };\r\n\r\n  return { postSupport, isLoading, hasError, isSuccess };\r\n};\r\n\r\nexport default useSupport;\r\n","import { InferType, object, SchemaOf, string } from 'yup';\r\n\r\nexport interface ContactFormInputProps {\r\n  emailAddress: string;\r\n  message: string;\r\n  details: { name: string };\r\n}\r\n\r\nexport const withContactFormSchema: SchemaOf<ContactFormInputProps> = object().shape(\r\n  {\r\n    emailAddress: string()\r\n      .email('Please enter a valid email address.')\r\n      .required('Email is required.'),\r\n    message: string().required('Description is required.'),\r\n    details: object().shape({ name: string().required('Name is required.') }),\r\n  }\r\n);\r\n\r\nexport type withContactFormSchemaValues = InferType<\r\n  typeof withContactFormSchema\r\n>;\r\n","import {\r\n  Alert,\r\n  AlertDescription,\r\n  AlertIcon,\r\n  Box,\r\n  Button,\r\n  Stack,\r\n} from '@chakra-ui/react';\r\nimport { InputField, TextAreaField } from '@highoutput/hds-forms';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport React, { FC } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport useSupport from './useSupport';\r\nimport {\r\n  ContactFormInputProps,\r\n  withContactFormSchema,\r\n  withContactFormSchemaValues,\r\n} from './validation';\r\n\r\n// type WithoutChildren<T> = Omit<T, 'children'>;\r\n\r\nexport interface ContactFormProps {\r\n  onSubmit?(values: ContactFormInputProps): void;\r\n  url?: string;\r\n  // partProps?: Partial<{\r\n  //   input?: WithoutChildren<InputFieldProps>;\r\n  //   textarea?: WithoutChildren<TextAreaFieldProps>;\r\n  //   button?: WithoutChildren<ButtonProps>;\r\n  // }>;\r\n}\r\n\r\nconst ContactForm: FC<ContactFormProps> = (props) => {\r\n  const { onSubmit, url } = props;\r\n  const { postSupport, hasError, isSuccess, isLoading } = useSupport();\r\n  const { register, handleSubmit, formState, reset } =\r\n    useForm<withContactFormSchemaValues>({\r\n      resolver: yupResolver(withContactFormSchema),\r\n      defaultValues: {\r\n        emailAddress: '',\r\n        message: '',\r\n        details: {\r\n          name: '',\r\n        },\r\n      },\r\n      shouldUnregister: true,\r\n    });\r\n\r\n  const onSubmitForm = async (values: withContactFormSchemaValues) => {\r\n    if (url) {\r\n      await postSupport(url, values);\r\n\r\n      reset({\r\n        emailAddress: '',\r\n        message: '',\r\n        details: {\r\n          name: '',\r\n        },\r\n      });\r\n    }\r\n\r\n    if (onSubmit) onSubmit(values);\r\n  };\r\n\r\n  const { isSubmitting, errors } = formState;\r\n\r\n  return (\r\n    <Box maxW={512} data-testid=\"box.contactform.container\">\r\n      <Box\r\n        as=\"form\"\r\n        onSubmitCapture={handleSubmit(onSubmitForm)}\r\n        data-testid=\"box.contactform.form\"\r\n      >\r\n        <Stack spacing={4}>\r\n          <InputField\r\n            // {...partProps?.input}\r\n            {...register('details.name')}\r\n            id=\"name\"\r\n            label=\"Name\"\r\n            placeholder=\"Input your name\"\r\n            errorMsg={errors.details?.name?.message}\r\n            disabled={isSubmitting}\r\n          />\r\n          <InputField\r\n            // {...partProps?.input}\r\n            {...register('emailAddress')}\r\n            id=\"emailAddress\"\r\n            label=\"Email\"\r\n            placeholder=\"Input your email address\"\r\n            errorMsg={errors.emailAddress?.message}\r\n            disabled={isSubmitting}\r\n            data-testid=\"input.contactform.email\"\r\n          />\r\n          <TextAreaField\r\n            // {...partProps?.textarea}\r\n            {...register('message')}\r\n            id=\"message\"\r\n            label=\"Desciption of concern\"\r\n            placeholder=\"Enter description\"\r\n            errorMsg={errors.message?.message}\r\n            disabled={isSubmitting}\r\n            data-testid=\"textarea.contactform.description\"\r\n          />\r\n          <Button\r\n            w=\"full\"\r\n            variant=\"primary\"\r\n            isLoading={isSubmitting || isLoading}\r\n            // {...partProps?.button}\r\n            type=\"submit\"\r\n            data-testid=\"button.contactform.submit\"\r\n          >\r\n            Send\r\n          </Button>\r\n\r\n          {hasError && (\r\n            <Alert status=\"error\">\r\n              <AlertIcon />\r\n              <AlertDescription>Ops, Something went wrong.</AlertDescription>\r\n            </Alert>\r\n          )}\r\n\r\n          {isSuccess && (\r\n            <Alert status=\"success\">\r\n              <AlertIcon />\r\n              <AlertDescription>Message successfully sent!</AlertDescription>\r\n            </Alert>\r\n          )}\r\n        </Stack>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ContactForm;\r\n","import { Box, BoxProps, Center, Text } from '@chakra-ui/react';\r\nimport React, { FC, ReactNode } from 'react';\r\nimport ContactForm from './ContactForm';\r\n\r\nexport interface ContactCardProps extends Pick<BoxProps, 'pos' | 'top' | 'w'> {\r\n  children?: ReactNode;\r\n  title?: string;\r\n  url?: string;\r\n}\r\n\r\nconst ContactCard: FC<ContactCardProps> = (props) => {\r\n  const { children, title = 'Drop your message', url } = props;\r\n  return (\r\n    <Box\r\n      w={512}\r\n      bg=\"white\"\r\n      borderRadius=\"8px\"\r\n      padding=\"56px\"\r\n      boxShadow=\"0px 10px 15px -3px rgba(0, 0, 0, 0.1), 0px 4px 6px -2px rgba(0, 0, 0, 0.05)\"\r\n      {...props}\r\n      data-testid=\"box.contactcard.container\"\r\n    >\r\n      <Center mb={8} data-testid=\"center.contactcard.titleposition\">\r\n        <Text size=\"header-4\" data-testid=\"text.contactcard.title\">\r\n          {title}\r\n        </Text>\r\n      </Center>\r\n      {children ? (\r\n        children\r\n      ) : (\r\n        <ContactForm\r\n          // {...partProps?.contactForm}\r\n          url={url}\r\n        />\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ContactCard;\r\n","import { Box, Center, Text } from '@chakra-ui/react';\r\nimport { HovIcon } from '@highoutput/hds-icons';\r\nimport React, { FC, ReactNode } from 'react';\r\nimport ContactCard from './ContactCard';\r\n\r\nexport interface ContagePageProps {\r\n  title?: string;\r\n  secondaryTitle?: string;\r\n  iconNode?: ReactNode;\r\n  url?: string;\r\n}\r\n\r\nconst ContactPage: FC<ContagePageProps> = (props) => {\r\n  const {\r\n    title = 'Contact Us',\r\n    secondaryTitle = `Tell us what you need and we'll help you out.`,\r\n    iconNode,\r\n    url,\r\n  } = props;\r\n  return (\r\n    <Box pos=\"relative\" w=\"100%\" data-testid=\"box.contactpage.container\">\r\n      <Box\r\n        minW={'600px'}\r\n        bg=\"#000\"\r\n        w=\"100%\"\r\n        h=\"400px\"\r\n        // {...props}\r\n        data-testid=\"box.contactpage.banner\"\r\n      >\r\n        <Center pt={20} pb={8} data-testid=\"center.contactpage.iconposition\">\r\n          {iconNode ? (\r\n            iconNode\r\n          ) : (\r\n            <HovIcon color=\"white\" data-testid=\"icon.contactpage.hovicon\" />\r\n          )}\r\n        </Center>\r\n\r\n        <Center data-testid=\"center.contactpage.titlepostion\">\r\n          <Text\r\n            size=\"header-3\"\r\n            color=\"white\"\r\n            // {...partProps?.title}\r\n            data-testid=\"text.contactpage.title\"\r\n          >\r\n            {title}\r\n          </Text>\r\n        </Center>\r\n\r\n        <Center data-testid=\"center.contactpage.secondarytitleposition\">\r\n          <Text\r\n            color=\"gray.200\"\r\n            // {...partProps?.secondaryTitle}\r\n            data-testid=\"text.contactpage.secondarytitle\"\r\n          >\r\n            {secondaryTitle}\r\n          </Text>\r\n        </Center>\r\n      </Box>\r\n      <Center\r\n        minW={'600px'}\r\n        data-testid=\"center.contactpage.secondarytitleposition\"\r\n      >\r\n        <ContactCard\r\n          pos=\"absolute\"\r\n          top=\"250px\"\r\n          w=\"512px\"\r\n          url={url}\r\n          // {...partProps?.contactCard}\r\n        />\r\n      </Center>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ContactPage;\r\n"],"names":["postJson","u","d","_context","fetch","body","JSON","stringify","method","headers","Content-Type","response","json","parsed","ok","Error","error","message","useSupport","useState","hasError","setHasError","isLoading","setLoading","isSuccess","setSuccess","postSupport","url","data","withContactFormSchema","object","shape","emailAddress","string","email","required","details","name","ContactForm","props","onSubmit","useForm","resolver","yupResolver","defaultValues","shouldUnregister","register","formState","reset","isSubmitting","errors","React","Box","maxW","as","onSubmitCapture","handleSubmit","values","Stack","spacing","InputField","id","label","placeholder","errorMsg","_errors$details","_errors$details$name","disabled","_errors$emailAddress","TextAreaField","_errors$message","Button","w","variant","type","Alert","status","AlertIcon","AlertDescription","ContactCard","children","_props$title","title","bg","borderRadius","padding","boxShadow","Center","mb","Text","size","_props$secondaryTitle","secondaryTitle","pos","minW","h","pt","pb","iconNode","HovIcon","color","top"],"mappings":"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"}