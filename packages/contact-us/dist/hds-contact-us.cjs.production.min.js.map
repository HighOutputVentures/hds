{"version":3,"file":"hds-contact-us.cjs.production.min.js","sources":["../src/components/http.utils.ts","../src/components/useSupport.tsx","../src/components/validation.ts","../src/components/ContactForm.tsx","../src/components/ContactCard.tsx","../src/components/ContactPage.tsx"],"sourcesContent":["type Dict = Record<string, unknown>;\n\ntype PostJson = <T = unknown>(url: string, postfields: Dict) => Promise<T>;\n\nexport const postJson: PostJson = async (u, d) => {\n  const response = await fetch(u, {\n    body: JSON.stringify(d),\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n\n  const parsed = await response.json();\n\n  if (!response.ok) throw new Error(parsed.error.message);\n\n  return parsed;\n};\n","import { useState } from 'react';\nimport { postJson } from './http.utils';\nimport { ContactFormInputProps } from './validation';\n\nconst useSupport = () => {\n  const [hasError, setHasError] = useState(false);\n  const [isLoading, setLoading] = useState(false);\n  const [isSuccess, setSuccess] = useState(false);\n\n  const postSupport = async (url: string, data: ContactFormInputProps) => {\n    setHasError(false);\n    setSuccess(false);\n    setLoading(true);\n\n    try {\n      const response = await postJson<{ ok: true }>(url, { ...data });\n\n      if (response) {\n        setSuccess(true);\n      }\n    } catch (error) {\n      setHasError(true);\n    }\n\n    setLoading(false);\n  };\n\n  return { postSupport, isLoading, hasError, isSuccess };\n};\n\nexport default useSupport;\n","import { InferType, object, SchemaOf, string } from 'yup';\n\nexport interface ContactFormInputProps {\n  emailAddress: string;\n  message: string;\n  details: { name: string };\n}\n\nexport const withContactFormSchema: SchemaOf<ContactFormInputProps> = object().shape(\n  {\n    emailAddress: string()\n      .email('Please enter a valid email address.')\n      .required('Email is required.'),\n    message: string().required('Description is required.'),\n    details: object().shape({ name: string().required('Name is required.') }),\n  }\n);\n\nexport type withContactFormSchemaValues = InferType<\n  typeof withContactFormSchema\n>;\n","import {\n  Alert,\n  AlertDescription,\n  AlertIcon,\n  Box,\n  Button,\n  Stack,\n} from '@chakra-ui/react';\nimport { InputField, TextAreaField } from '@highoutput/hds-forms';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport React, { FC } from 'react';\nimport { useForm } from 'react-hook-form';\nimport useSupport from './useSupport';\nimport {\n  ContactFormInputProps,\n  withContactFormSchema,\n  withContactFormSchemaValues,\n} from './validation';\n\n// type WithoutChildren<T> = Omit<T, 'children'>;\n\nexport interface ContactFormProps {\n  onSubmit?(values: ContactFormInputProps): void;\n  url?: string;\n  // partProps?: Partial<{\n  //   input?: WithoutChildren<InputFieldProps>;\n  //   textarea?: WithoutChildren<TextAreaFieldProps>;\n  //   button?: WithoutChildren<ButtonProps>;\n  // }>;\n}\n\nconst ContactForm: FC<ContactFormProps> = (props) => {\n  const { onSubmit, url } = props;\n  const { postSupport, hasError, isSuccess, isLoading } = useSupport();\n  const { register, handleSubmit, formState, reset } =\n    useForm<withContactFormSchemaValues>({\n      resolver: yupResolver(withContactFormSchema),\n      defaultValues: {\n        emailAddress: '',\n        message: '',\n        details: {\n          name: '',\n        },\n      },\n      shouldUnregister: true,\n    });\n\n  const onSubmitForm = async (values: withContactFormSchemaValues) => {\n    if (url) {\n      await postSupport(url, values);\n\n      reset({\n        emailAddress: '',\n        message: '',\n        details: {\n          name: '',\n        },\n      });\n    }\n\n    if (onSubmit) onSubmit(values);\n  };\n\n  const { isSubmitting, errors } = formState;\n\n  return (\n    <Box maxW={512} data-testid=\"box.contactform.container\">\n      <Box\n        as=\"form\"\n        onSubmitCapture={handleSubmit(onSubmitForm)}\n        data-testid=\"box.contactform.form\"\n      >\n        <Stack spacing={4}>\n          <InputField\n            // {...partProps?.input}\n            {...register('details.name')}\n            id=\"name\"\n            label=\"Name\"\n            placeholder=\"Input your name\"\n            errorMsg={errors.details?.name?.message}\n            disabled={isSubmitting}\n          />\n          <InputField\n            // {...partProps?.input}\n            {...register('emailAddress')}\n            id=\"emailAddress\"\n            label=\"Email\"\n            placeholder=\"Input your email address\"\n            errorMsg={errors.emailAddress?.message}\n            disabled={isSubmitting}\n            data-testid=\"input.contactform.email\"\n          />\n          <TextAreaField\n            // {...partProps?.textarea}\n            {...register('message')}\n            id=\"message\"\n            label=\"Desciption of concern\"\n            placeholder=\"Enter description\"\n            errorMsg={errors.message?.message}\n            disabled={isSubmitting}\n            data-testid=\"textarea.contactform.description\"\n          />\n          <Button\n            w=\"full\"\n            variant=\"primary\"\n            isLoading={isSubmitting || isLoading}\n            // {...partProps?.button}\n            type=\"submit\"\n            data-testid=\"button.contactform.submit\"\n          >\n            Send\n          </Button>\n\n          {hasError && (\n            <Alert status=\"error\">\n              <AlertIcon />\n              <AlertDescription>Ops, Something went wrong.</AlertDescription>\n            </Alert>\n          )}\n\n          {isSuccess && (\n            <Alert status=\"success\">\n              <AlertIcon />\n              <AlertDescription>Message successfully sent!</AlertDescription>\n            </Alert>\n          )}\n        </Stack>\n      </Box>\n    </Box>\n  );\n};\n\nexport default ContactForm;\n","import { Box, BoxProps, Center, Text } from '@chakra-ui/react';\nimport React, { FC, ReactNode } from 'react';\nimport ContactForm from './ContactForm';\n\nexport interface ContactCardProps extends Pick<BoxProps, 'pos' | 'top' | 'w'> {\n  children?: ReactNode;\n  title?: string;\n  url?: string;\n}\n\nconst ContactCard: FC<ContactCardProps> = (props) => {\n  const { children, title = 'Drop your message', url } = props;\n  return (\n    <Box\n      w={512}\n      bg=\"white\"\n      borderRadius=\"8px\"\n      padding=\"56px\"\n      boxShadow=\"0px 10px 15px -3px rgba(0, 0, 0, 0.1), 0px 4px 6px -2px rgba(0, 0, 0, 0.05)\"\n      {...props}\n      data-testid=\"box.contactcard.container\"\n    >\n      <Center mb={8} data-testid=\"center.contactcard.titleposition\">\n        <Text size=\"header-4\" data-testid=\"text.contactcard.title\">\n          {title}\n        </Text>\n      </Center>\n      {children ? (\n        children\n      ) : (\n        <ContactForm\n          // {...partProps?.contactForm}\n          url={url}\n        />\n      )}\n    </Box>\n  );\n};\n\nexport default ContactCard;\n","import { Box, Center, Text } from '@chakra-ui/react';\nimport { HovIcon } from '@highoutput/hds-icons';\nimport React, { FC, ReactNode } from 'react';\nimport ContactCard from './ContactCard';\n\nexport interface ContagePageProps {\n  title?: string;\n  secondaryTitle?: string;\n  iconNode?: ReactNode;\n  url?: string;\n}\n\nconst ContactPage: FC<ContagePageProps> = (props) => {\n  const {\n    title = 'Contact Us',\n    secondaryTitle = `Tell us what you need and we'll help you out.`,\n    iconNode,\n    url,\n  } = props;\n  return (\n    <Box pos=\"relative\" w=\"100%\" data-testid=\"box.contactpage.container\">\n      <Box\n        minW={'600px'}\n        bg=\"#000\"\n        w=\"100%\"\n        h=\"400px\"\n        // {...props}\n        data-testid=\"box.contactpage.banner\"\n      >\n        <Center pt={20} pb={8} data-testid=\"center.contactpage.iconposition\">\n          {iconNode ? (\n            iconNode\n          ) : (\n            <HovIcon color=\"white\" data-testid=\"icon.contactpage.hovicon\" />\n          )}\n        </Center>\n\n        <Center data-testid=\"center.contactpage.titlepostion\">\n          <Text\n            size=\"header-3\"\n            color=\"white\"\n            // {...partProps?.title}\n            data-testid=\"text.contactpage.title\"\n          >\n            {title}\n          </Text>\n        </Center>\n\n        <Center data-testid=\"center.contactpage.secondarytitleposition\">\n          <Text\n            color=\"gray.200\"\n            // {...partProps?.secondaryTitle}\n            data-testid=\"text.contactpage.secondarytitle\"\n          >\n            {secondaryTitle}\n          </Text>\n        </Center>\n      </Box>\n      <Center\n        minW={'600px'}\n        data-testid=\"center.contactpage.secondarytitleposition\"\n      >\n        <ContactCard\n          pos=\"absolute\"\n          top=\"250px\"\n          w=\"512px\"\n          url={url}\n          // {...partProps?.contactCard}\n        />\n      </Center>\n    </Box>\n  );\n};\n\nexport default ContactPage;\n"],"names":["postJson","u","d","_context","fetch","body","JSON","stringify","method","headers","Content-Type","response","json","parsed","ok","Error","error","message","useSupport","useState","hasError","setHasError","isLoading","setLoading","isSuccess","setSuccess","postSupport","url","data","withContactFormSchema","object","shape","emailAddress","string","email","required","details","name","ContactForm","props","onSubmit","useForm","resolver","yupResolver","defaultValues","shouldUnregister","register","formState","reset","isSubmitting","errors","React","Box","maxW","as","onSubmitCapture","handleSubmit","values","Stack","spacing","InputField","id","label","placeholder","errorMsg","_errors$details","_errors$details$name","disabled","_errors$emailAddress","TextAreaField","_errors$message","Button","w","variant","type","Alert","status","AlertIcon","AlertDescription","ContactCard","children","_props$title","title","bg","borderRadius","padding","boxShadow","Center","mb","Text","size","_props$secondaryTitle","secondaryTitle","pos","minW","h","pt","pb","iconNode","HovIcon","color","top"],"mappings":"mqOAIO,IAAMA,aAAQ,kBAAa,WAAOC,EAAGC,GAAC,QAAA,6BAAA,OAAA,sBAAA,OAAA,OAAAC,SACpBC,MAAMH,EAAG,CAC9BI,KAAMC,KAAKC,UAAUL,GACrBM,OAAQ,OACRC,QAAS,CACPC,eAAgB,sBAElB,OANY,OAARC,SAAQR,SAQOQ,EAASC,OAAM,OAAxB,GAANC,SAEDF,EAASG,IAAEX,SAAA,MAAA,MAAQ,IAAIY,MAAMF,EAAOG,MAAMC,SAAQ,OAAA,yBAEhDJ,GAAM,OAAA,UAAA,0BACd,qBAdoB,mCCAfK,EAAa,WACjB,MAAgCC,YAAS,GAAlCC,OAAUC,SACeF,YAAS,GAAlCG,OAAWC,SACcJ,YAAS,GAAlCK,OAAWC,OAoBlB,MAAO,CAAEC,uBAlBQ,kBAAG,WAAOC,EAAaC,GAA2B,6BAAA,OAAA,sBAAA,OAGhD,OAFjBP,GAAY,GACZI,GAAW,GACXF,GAAW,GAAMpB,SAAAA,SAGQH,EAAuB2B,OAAUC,IAAO,eAG7DH,GAAW,GACZtB,UAAA,MAAA,QAAAA,UAAAA,gBAEDkB,GAAY,GAAM,QAGpBE,GAAW,GAAO,QAAA,UAAA,wCACnB,qBAhBgB,mCAkBKD,UAAAA,EAAWF,SAAAA,EAAUI,UAAAA,ICnBhCK,EAAyDC,WAASC,MAC7E,CACEC,aAAcC,WACXC,MAAM,uCACNC,SAAS,sBACZlB,QAASgB,WAASE,SAAS,4BAC3BC,QAASN,WAASC,MAAM,CAAEM,KAAMJ,WAASE,SAAS,yBCiBhDG,EAAoC,SAACC,eACjCC,EAAkBD,EAAlBC,SAAUb,EAAQY,EAARZ,MACsCT,IAAhDQ,IAAAA,YAAaN,IAAAA,SAAUI,IAAAA,UAAWF,IAAAA,YAExCmB,UAAqC,CACnCC,SAAUC,cAAYd,GACtBe,cAAe,CACbZ,aAAc,GACdf,QAAS,GACTmB,QAAS,CACPC,KAAM,KAGVQ,kBAAkB,IAVdC,IAAAA,SAAwBC,IAAAA,UAAWC,IAAAA,MA6BnCC,EAAyBF,EAAzBE,aAAcC,EAAWH,EAAXG,OAEtB,OACEC,gBAACC,OAAIC,KAAM,kBAAiB,6BAC1BF,gBAACC,OACCE,GAAG,OACHC,iBAAiBC,IAnCLA,yBAaA,kBAAG,WAAOC,GAAmC,6BAAA,OAAA,sBAAA,OAAA,IACzD9B,GAAGxB,SAAA,MAAA,OAAAA,SACCuB,EAAYC,EAAK8B,GAAO,OAE9BT,EAAM,CACJhB,aAAc,GACdf,QAAS,GACTmB,QAAS,CACPC,KAAM,MAEP,OAGDG,GAAUA,EAASiB,GAAQ,OAAA,UAAA,0BAChC,mBAdiB,kDAuBA,wBAEZN,gBAACO,SAAMC,QAAS,GACdR,gBAACS,8BAEKd,EAAS,iBACbe,GAAG,OACHC,MAAM,OACNC,YAAY,kBACZC,kBAAUd,EAAOd,mBAAP6B,EAAgB5B,aAAhB6B,EAAsBjD,QAChCkD,SAAUlB,KAEZE,gBAACS,8BAEKd,EAAS,iBACbe,GAAG,eACHC,MAAM,QACNC,YAAY,2BACZC,kBAAUd,EAAOlB,qBAAPoC,EAAqBnD,QAC/BkD,SAAUlB,gBACE,6BAEdE,gBAACkB,iCAEKvB,EAAS,YACbe,GAAG,UACHC,MAAM,wBACNC,YAAY,oBACZC,kBAAUd,EAAOjC,gBAAPqD,EAAgBrD,QAC1BkD,SAAUlB,gBACE,sCAEdE,gBAACoB,UACCC,EAAE,OACFC,QAAQ,UACRnD,UAAW2B,GAAgB3B,EAE3BoD,KAAK,uBACO,qCAKbtD,GACC+B,gBAACwB,SAAMC,OAAO,SACZzB,gBAAC0B,kBACD1B,gBAAC2B,uDAIJtD,GACC2B,gBAACwB,SAAMC,OAAO,WACZzB,gBAAC0B,kBACD1B,gBAAC2B,2DCjHTC,EAAoC,SAACxC,GACzC,IAAQyC,EAA+CzC,EAA/CyC,SAAQC,EAAuC1C,EAArC2C,MAAAA,aAAQ,sBAAqBvD,EAAQY,EAARZ,IAC/C,OACEwB,gBAACC,qBACCoB,EAAG,IACHW,GAAG,QACHC,aAAa,MACbC,QAAQ,OACRC,UAAU,+EACN/C,iBACQ,8BAEZY,gBAACoC,UAAOC,GAAI,gBAAe,oCACzBrC,gBAACsC,QAAKC,KAAK,yBAAuB,0BAC/BR,IAGJF,GAGC7B,gBAACb,GAECX,IAAKA,sECpB2B,SAACY,GACzC,MAKIA,EAJF2C,MAAAA,aAAQ,eAAYS,EAIlBpD,EAHFqD,eAAAA,+DAEAjE,EACEY,EADFZ,IAEF,OACEwB,gBAACC,OAAIyC,IAAI,WAAWrB,EAAE,qBAAmB,6BACvCrB,gBAACC,OACC0C,KAAM,QACNX,GAAG,OACHX,EAAE,OACFuB,EAAE,sBAEU,0BAEZ5C,gBAACoC,UAAOS,GAAI,GAAIC,GAAI,gBAAe,mCAXrC1D,EAFF2D,UAiBQ/C,gBAACgD,WAAQC,MAAM,sBAAoB,8BAIvCjD,gBAACoC,wBAAmB,mCAClBpC,gBAACsC,QACCC,KAAK,WACLU,MAAM,sBAEM,0BAEXlB,IAIL/B,gBAACoC,wBAAmB,6CAClBpC,gBAACsC,QACCW,MAAM,yBAEM,mCAEXR,KAIPzC,gBAACoC,UACCO,KAAM,sBACM,6CAEZ3C,gBAAC4B,GACCc,IAAI,WACJQ,IAAI,QACJ7B,EAAE,QACF7C,IAAKA"}