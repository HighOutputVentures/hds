{"version":3,"file":"hds-utilities.cjs.production.min.js","sources":["../src/components/For/For.tsx","../src/components/Show/Show.tsx"],"sourcesContent":["import * as React from 'react';\r\nimport { Fragment } from 'react';\r\n\r\nexport type ForProps<T extends unknown[]> = {\r\n  each: T;\r\n  getKey?: (context: T[number], index: number) => string | number;\r\n  children: (context: T[number], index: number) => JSX.Element;\r\n  fallback?: JSX.Element | null;\r\n};\r\n\r\nexport default function For<T extends unknown[]>(props: ForProps<T>) {\r\n  const { each, fallback, children, getKey } = Object.assign(\r\n    defaultProps,\r\n    props\r\n  );\r\n\r\n  if (!each.length) return fallback;\r\n\r\n  return (\r\n    <Fragment>\r\n      {each.map((value, index) => {\r\n        const Item = () => children(value, index);\r\n\r\n        return <Item key={getKey(value, index)} />;\r\n      })}\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nconst defaultProps = {\r\n  fallback: null,\r\n  getKey(_: unknown, index: number) {\r\n    return index;\r\n  },\r\n};\r\n","import * as React from 'react';\r\n\r\nexport type ShowProps = {\r\n  when?: boolean;\r\n  fallback?: JSX.Element | null;\r\n};\r\n\r\nexport default function Show(props: React.PropsWithChildren<ShowProps>) {\r\n  const { when, fallback, children } = Object.assign({ fallback: null }, props);\r\n\r\n  return !when ? fallback : <React.Fragment>{children}</React.Fragment>;\r\n}\r\n"],"names":["defaultProps","fallback","getKey","_","index","props","Object","assign","each","children","length","React","Fragment","map","value","key","when"],"mappings":"2FA6BMA,EAAe,CACnBC,SAAU,KACVC,gBAAOC,EAAYC,GACjB,OAAOA,yBAtBsCC,GAC/C,MAA6CC,OAAOC,OAClDP,EACAK,GAFMG,IAAAA,KAAMP,IAAAA,SAAUQ,IAAAA,SAAUP,IAAAA,OAKlC,OAAKM,EAAKE,OAGRC,gBAACC,gBACEJ,EAAKK,KAAI,SAACC,EAAOV,GAGhB,OAAOO,iBAFM,WAAH,OAASF,EAASK,EAAOV,MAEtBW,IAAKb,EAAOY,EAAOV,SAPbH,yBCTEI,GAC3B,MAAqCC,OAAOC,OAAO,CAAEN,SAAU,MAAQI,GAAzDJ,IAAAA,SAEd,SAFQe,KAEkBL,gBAACA,kBAFHF,UAETR"}